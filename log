aniproppy.py:        self.dArr   = np.ones(nl, dtype = np.float32)*np.float32(dh)
aniproppy.py:        self.dArr   = np.array([20.,  15.,  42.,  43.,  45.,  35.], dtype = np.float32)
aniproppy.py:        # self.dArr   = np.array([20.,  15.,  42.,  43.,  45.,  45., 50., 50.], dtype = np.float32)
aniproppy.py:        self.dArr   = np.array([20.,  15.,  42.,  43.,  45.,  35.], dtype = np.float32)
aniproppy.py:        self.dArr   = np.array([35.,  42.,  43.,  45.,  35.], dtype = np.float32)
aniproppy.py:            phig                = np.zeros(nl+1, dtype=np.float32)
aniproppy.py:            theta   = np.zeros(nl+1, dtype=np.float32)
aniproppy.py:            phig    = np.zeros(nl+1, dtype=np.float32)
aniproppy.py:                phig                = np.zeros(nl+1, dtype=np.float32)
aniproppy.py:                theta   = np.zeros(nl+1, dtype=np.float32)
aniproppy.py:                phig    = np.zeros(nl+1, dtype=np.float32)
aniproppy.py:            theta   = np.zeros(nl+1, dtype=np.float32)
aniproppy.py:            phig    = np.zeros(nl+1, dtype=np.float32)
data.py:        inArr 		= np.loadtxt(infname, dtype=np.float32)
data.py:            indisp.stdpvelo= np.ones(indisp.npper, dtype=np.float32)
data.py:        inArr 		= np.loadtxt(infname, dtype=np.float32)
data.py:            indisp.stdgvelo= np.ones(indisp.ngper, dtype=np.float32)
data.py:        inArr 		= np.loadtxt(infname, dtype=np.float32)
data.py:            indisp.stdpampo= np.ones(indisp.npper, dtype=np.float32)
data.py:    # # #     inArr 		= np.loadtxt(infname, dtype=np.float32)
data.py:    # # #         indisp.stdgvelo= np.ones(indisp.ngper, dtype=np.float32)
data.py:        inArr 		= np.loadtxt(infname, dtype=np.float32)
data.py:            indisp.stdpphio= np.ones(indisp.npper, dtype=np.float32)
data.py:    # # #     inArr 		= np.loadtxt(infname, dtype=np.float32)
data.py:    # # #         indisp.stdgvelo= np.ones(indisp.ngper, dtype=np.float32)
data.py:    inArr 		= np.loadtxt(infname, dtype=np.float32)
data.py:        inrf.stdrfo = np.ones(self.npts, dtype=np.float32)*np.float32(0.1)
data.py:        ('pper',    numba.float32[:]),
data.py:        ('pvelo',   numba.float32[:]),
data.py:        ('stdpvelo',numba.float32[:]),
data.py:        ('pphio',   numba.float32[:]),
data.py:        ('stdpphio',numba.float32[:]),
data.py:        ('pampo',   numba.float32[:]),
data.py:        ('stdpampo',numba.float32[:]),
data.py:        ('pvelref', numba.float32[:]),
data.py:        ('pvelp',   numba.float32[:]),
data.py:        ('pphip',   numba.float32[:]),
data.py:        ('pampp',   numba.float32[:]),
data.py:        ('pmisfit', numba.float32),
data.py:        ('pL',      numba.float32),
data.py:        ('gper',    numba.float32[:]),
data.py:        ('gvelo',   numba.float32[:]),
data.py:        ('stdgvelo',numba.float32[:]),
data.py:        # ('gphio', numba.float32[:]),
data.py:        # ('gampo', numba.float32[:]),
data.py:        ('gvelp',   numba.float32[:]),
data.py:        # ('gphip', numba.float32[:]),
data.py:        # ('gampp', numba.float32[:]),
data.py:        ('gmisfit', numba.float32),
data.py:        ('gL',      numba.float32),
data.py:        ('misfit',  numba.float32),
data.py:        ('L',       numba.float32),
data.py:        ('period',  numba.float32[:]),
data.py:        ('fs',      numba.float32),
data.py:        ('rfo',     numba.float32[:]),
data.py:        ('to',      numba.float32[:]),
data.py:        ('stdrfo',  numba.float32[:]),
data.py:        ('rfp',     numba.float32[:]),
data.py:        ('tp',      numba.float32[:]),
data.py:        ('misfit',  numba.float32),
data.py:        ('L',       numba.float32)
data.py:            ('misfit',  numba.float32),
data.py:            ('L',       numba.float32)
eigenkernel.py:        ('A',       numba.float32[:]),
eigenkernel.py:        ('C',       numba.float32[:]),
eigenkernel.py:        ('F',       numba.float32[:]),
eigenkernel.py:        ('L',       numba.float32[:]),
eigenkernel.py:        ('N',       numba.float32[:]),
eigenkernel.py:        ('rho',     numba.float32[:]),
eigenkernel.py:        ('Aeti',    numba.float32[:]),
eigenkernel.py:        ('Ceti',    numba.float32[:]),
eigenkernel.py:        ('Feti',    numba.float32[:]),
eigenkernel.py:        ('Leti',    numba.float32[:]),
eigenkernel.py:        ('Neti',    numba.float32[:]),
eigenkernel.py:        ('rhoeti',  numba.float32[:]),
eigenkernel.py:        ('BcArr',   numba.float32[:]),
eigenkernel.py:        ('BsArr',   numba.float32[:]),
eigenkernel.py:        ('GcArr',   numba.float32[:]),
eigenkernel.py:        ('GsArr',   numba.float32[:]),
eigenkernel.py:        ('HcArr',   numba.float32[:]),
eigenkernel.py:        ('HsArr',   numba.float32[:]),
eigenkernel.py:        ('CcArr',   numba.float32[:]),
eigenkernel.py:        ('CsArr',   numba.float32[:]),
eigenkernel.py:        ('uz',      numba.float32[:,:]),
eigenkernel.py:        ('tuz',     numba.float32[:,:]),
eigenkernel.py:        ('ur',      numba.float32[:,:]),
eigenkernel.py:        ('tur',     numba.float32[:,:]),
eigenkernel.py:        ('durdz',   numba.float32[:,:]),
eigenkernel.py:        ('duzdz',   numba.float32[:,:]),
eigenkernel.py:        ('ut',      numba.float32[:,:]),
eigenkernel.py:        ('tut',     numba.float32[:,:]),
eigenkernel.py:        ('dutdz',   numba.float32[:,:]),
eigenkernel.py:        ('dcdah',   numba.float32[:,:]),
eigenkernel.py:        ('dcdav',   numba.float32[:,:]),
eigenkernel.py:        ('dcdbh',   numba.float32[:,:]),
eigenkernel.py:        ('dcdbv',   numba.float32[:,:]),
eigenkernel.py:        ('dcdr',    numba.float32[:,:]),
eigenkernel.py:        ('dcdn',    numba.float32[:,:]),
eigenkernel.py:        ('dcdA',    numba.float32[:,:]),
eigenkernel.py:        ('dcdC',    numba.float32[:,:]),
eigenkernel.py:        ('dcdF',    numba.float32[:,:]),
eigenkernel.py:        ('dcdL',    numba.float32[:,:]),
eigenkernel.py:        ('dcdN',    numba.float32[:,:]),
eigenkernel.py:        ('dcdrl',   numba.float32[:,:]),
eigenkernel.py:        self.A      = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.C      = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.F      = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.L      = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.N      = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.rho    = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.Aeti   = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.Ceti   = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.Feti   = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.Leti   = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.Neti   = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.rhoeti = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.BcArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.BsArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.GcArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.GsArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.HcArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.HsArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.CcArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:        self.CsArr  = np.zeros(np.int64(nlay), dtype=np.float32)
eigenkernel.py:            self.ut = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.tut= np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.uz = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.tuz= np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.ur = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.tur= np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.dcdah  = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.dcdav  = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.dcdn   = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:        self.dcdbh  = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:        self.dcdbv  = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:        self.dcdr   = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.dcdA   = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.dcdC   = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:            self.dcdF   = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:        self.dcdL   = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:        self.dcdN   = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:        self.dcdrl  = np.zeros((np.int64(nfreq), np.int64(nlay)), dtype=np.float32)
eigenkernel.py:        dpvel   = np.zeros(np.int64(self.nfreq), dtype = np.float32)
eigenkernel.py:        az          = np.zeros(360, dtype = np.float32)
eigenkernel.py:            az[i]   = np.float32(i+1)
eigenkernel.py:        faz         = np.zeros(360, dtype = np.float32)
eigenkernel.py:        Ac2az       = np.zeros(np.int64(self.nfreq), dtype = np.float32)
eigenkernel.py:        As2az       = np.zeros(np.int64(self.nfreq), dtype = np.float32)
eigenkernel.py:        amp         = np.zeros(np.int64(self.nfreq), dtype = np.float32)
eigenkernel.py:        phi         = np.zeros(np.int64(self.nfreq), dtype = np.float32)
modparam.py:        cvel                    = np.array(cvel, dtype=np.float32)
modparam.py:        ratio                   = np.array(ratio, dtype=np.float32)
modparam.py:        cvsv                    = np.array(cvsv, dtype=np.float32)
modparam.py:            ceta                    = np.ones(cvsv.size, dtype=np.float32)
modparam.py:            cvph                    = np.array(cvph, dtype=np.float32) 
modparam.py:            cvpv                    = np.array(cvpv, dtype=np.float32) 
modparam.py:            cvsh                    = np.array(cvsh, dtype=np.float32)
modparam.py:            ceta                    = np.array(ceta, dtype=np.float32)
modparam.py:            cdip                    = np.array(cdip, dtype=np.float32)
modparam.py:            cstrike                 = np.array(cstrike, dtype=np.float32)
modparam.py:        ratio                   = np.array(ratio, dtype=np.float32)
modparam.py:            temp                        = np.array(line.split(), dtype=np.float32)
modparam.py:@numba.jit(numba.types.Tuple((numba.float32[:], numba.float32[:,:]))(\
modparam.py:        numba.int32, numba.int32, numba.float32, numba.float32, numba.int32, numba.int32))
modparam.py:    t           = np.zeros(m+1, dtype=np.float32)
modparam.py:    depth   = np.zeros(npts, dtype=np.float32)
modparam.py:        depth[i]    = np.float32(i) * np.float32(step) + np.float32(zmin_Bs)
modparam.py:    obasis  = np.zeros((np.int64(m), np.int64(npts)), dtype = np.float32)
modparam.py:    nbasis  = np.zeros((np.int64(m), np.int64(npts)), dtype = np.float32)
modparam.py:        ('paraindex',   numba.float32[:,:]),
modparam.py:        ('paraval',     numba.float32[:]),
modparam.py:        ('space',       numba.float32[:,:]),
modparam.py:        ('misfit',      numba.float32),
modparam.py:        ('L',           numba.float32)
modparam.py:        self.paraval        = np.zeros(np.int64(self.npara), dtype=np.float32)
modparam.py:        self.paraindex      = np.zeros((np.int64(self.maxind), np.int64(self.npara)), dtype = np.float32)
modparam.py:        self.space          = np.zeros((3, np.int64(self.npara)), dtype = np.float32)
modparam.py:        self.paraval    = np.array(paralst, dtype=np.float32)
modparam.py:        ('thickness',   numba.float32[:]),
modparam.py:        ('vpvs',        numba.float32[:]),
modparam.py:        ('spl',         numba.float32[:, :, :]),
modparam.py:        ('ratio',       numba.float32[:, :]),
modparam.py:        ('cvel',        numba.float32[:, :]),
modparam.py:        ('vs',          numba.float32[:, :]),
modparam.py:        ('hArr',        numba.float32[:, :]),
modparam.py:        ('t',           numba.float32[:, :]),
modparam.py:        self.thickness  = np.zeros(np.int64(self.nmod), dtype=np.float32)
modparam.py:        self.vpvs       = np.ones(np.int64(self.nmod), dtype=np.float32)*np.float32(1.75)
modparam.py:        self.cvel       = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.t          = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.ratio      = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.vs         = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.hArr       = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.spl        = np.zeros((np.int64(self.maxspl), np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:                vs          = np.zeros(np.int64(nlay), dtype=np.float32)
modparam.py:                    vs[ilay]= self.cvel[0, i] + dcvel*np.float32(ilay)
modparam.py:                hArr 	    = np.ones(nlay, dtype=np.float32)*np.float32(dh)
modparam.py:        vs      = np.array(vs, dtype=np.float32)
modparam.py:        vp      = np.array(vp, dtype=np.float32)
modparam.py:        rho     = np.array(rho, dtype=np.float32)
modparam.py:        qs      = np.array(qs, dtype=np.float32)
modparam.py:        qp      = np.array(qp, dtype=np.float32)
modparam.py:        hArr    = np.array(hArr, dtype=np.float32)
modparam.py:                self.para.space[:, i] = np.array([valmin, valmax, step], dtype=np.float32)
modparam.py:        paraval             = np.array(paralst, dtype = np.float32)
modparam.py:        ('thickness',   numba.float32[:]),
modparam.py:        ('vpvs',        numba.float32[:]),
modparam.py:        ('spl',         numba.float32[:, :, :]),
modparam.py:        ('ratio',       numba.float32[:, :]),
modparam.py:        ('cvph',        numba.float32[:, :]),
modparam.py:        ('cvpv',        numba.float32[:, :]),
modparam.py:        ('cvsh',        numba.float32[:, :]),
modparam.py:        ('cvsv',        numba.float32[:, :]),
modparam.py:        ('ceta',        numba.float32[:, :]),
modparam.py:        ('crho',        numba.float32[:, :]),
modparam.py:        ('vph',         numba.float32[:, :]),
modparam.py:        ('vpv',         numba.float32[:, :]),
modparam.py:        ('vsh',         numba.float32[:, :]),
modparam.py:        ('vsv',         numba.float32[:, :]),
modparam.py:        ('eta',         numba.float32[:, :]),
modparam.py:        ('rho',         numba.float32[:, :]),
modparam.py:        ('cdip',        numba.float32[:, :]),
modparam.py:        ('cstrike',     numba.float32[:, :]),
modparam.py:        ('dip',         numba.float32[:, :]),
modparam.py:        ('strike',      numba.float32[:, :]),
modparam.py:        ('dipjump',     numba.float32),
modparam.py:        ('hArr',        numba.float32[:, :]),
modparam.py:        ('t',           numba.float32[:, :]),
modparam.py:        self.thickness  = np.zeros(np.int64(self.nmod), dtype=np.float32)
modparam.py:        self.vpvs       = np.ones(np.int64(self.nmod), dtype=np.float32)*np.float32(1.75)
modparam.py:        self.cvph       = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.cvpv       = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.cvsh       = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.cvsv       = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.ceta       = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.crho       = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.t          = np.zeros((np.int64(self.maxspl), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.cdip       = np.zeros((np.int64(self.maxtilt), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.cstrike    = np.zeros((np.int64(self.maxtilt), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.ratio      = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.vph        = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.vpv        = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.vsh        = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.vsv        = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.eta        = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.rho        = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.dip        = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.strike     = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.hArr       = np.zeros((np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:        self.spl        = np.zeros((np.int64(self.maxspl), np.int64(self.maxlay), np.int64(self.nmod)), dtype = np.float32)
modparam.py:                    self.dip[:tnlay, i]      = np.ones(tnlay, dtype = np.float32) * self.cdip[0, i]
modparam.py:                    self.dip[:ind, i]       = np.ones(ind, dtype = np.float32) * self.cdip[0, i]
modparam.py:                    self.dip[ind:tnlay, i]  = np.ones(tnlay-ind, dtype = np.float32) * self.cdip[1, i]
modparam.py:                self.strike[:tnlay, i]      = np.ones(tnlay, dtype = np.float32) * self.cstrike[0, i]
modparam.py:                    self.dip[:tnlay, i]     = np.ones(tnlay, dtype = np.float32) * self.cdip[0, i]
modparam.py:                    self.dip[:ind, i]       = np.ones(ind, dtype = np.float32) * self.cdip[0, i]
modparam.py:                    self.dip[ind:tnlay, i]  = np.ones(tnlay-ind, dtype = np.float32) * self.cdip[1, i]
modparam.py:                self.strike[:tnlay, i]      = np.ones(tnlay, dtype = np.float32) * self.cstrike[0, i]
modparam.py:                vph         = np.zeros(np.int64(nlay), dtype=np.float32)
modparam.py:                vpv         = np.zeros(np.int64(nlay), dtype=np.float32)
modparam.py:                vsh         = np.zeros(np.int64(nlay), dtype=np.float32)
modparam.py:                vsv         = np.zeros(np.int64(nlay), dtype=np.float32)
modparam.py:                rho         = np.zeros(np.int64(nlay), dtype=np.float32)
modparam.py:                    vph[ilay]       = self.cvph[0, i] + dcvph*np.float32(ilay)
modparam.py:                    vpv[ilay]       = self.cvpv[0, i] + dcvpv*np.float32(ilay)
modparam.py:                    vsh[ilay]       = self.cvsh[0, i] + dcvsh*np.float32(ilay)
modparam.py:                    vsv[ilay]       = self.cvsv[0, i] + dcvsv*np.float32(ilay)
modparam.py:                    # # # rho[ilay]       = self.crho[0, i] + dcrho*np.float32(ilay)
modparam.py:                hArr 	            = np.ones(nlay, dtype=np.float32)*np.float32(dh)
modparam.py:                self.eta[:nlay, i]  = np.ones(nlay, dtype=np.float32)*self.ceta[0, i]
modparam.py:                    self.dip[:tnlay, i]     = np.ones(tnlay, dtype = np.float32) * self.cdip[0, i]
modparam.py:                    self.dip[:ind, i]       = np.ones(ind, dtype = np.float32) * self.cdip[0, i]
modparam.py:                    self.dip[ind:tnlay, i]  = np.ones(tnlay-ind, dtype = np.float32) * self.cdip[1, i]
modparam.py:                self.strike[:tnlay, i]      = np.ones(tnlay, dtype = np.float32) * self.cstrike[0, i]
modparam.py:        vph     = np.array(vph, dtype=np.float32)
modparam.py:        vpv     = np.array(vpv, dtype=np.float32)
modparam.py:        vsh     = np.array(vsh, dtype=np.float32)
modparam.py:        vsv     = np.array(vsv, dtype=np.float32)
modparam.py:        eta     = np.array(eta, dtype=np.float32)
modparam.py:        rho     = np.array(rho, dtype=np.float32)
modparam.py:        dip     = np.array(dip, dtype=np.float32)
modparam.py:        strike  = np.array(strike, dtype=np.float32)
modparam.py:        hArr    = np.array(hArr, dtype=np.float32)
modparam.py:                self.para.space[:, i] = np.array([valmin, valmax, step], dtype=np.float32)
modparam.py:        paraval             = np.array(paralst, dtype = np.float32)
spline_bk.py:        ('thickness',   numba.float32),
spline_bk.py:        ('vpvs',        numba.float32),      
spline_bk.py:        ('spl',         numba.float32[:, :]),
spline_bk.py:        ('ratio',       numba.float32[:]),
spline_bk.py:        ('vel',         numba.float32[:]),
spline_bk.py:        ('cvel',        numba.float32[:]),
spline_bk.py:        ('hArr',        numba.float32[:]),
spline_bk.py:        ('t',           numba.float32[:])
spline_bk.py:@numba.jit(numba.float32(numba.float32, numba.int32, numba.int32, numba.float32[:]))
spline_bk.py:        t           = np.zeros(m+1, dtype=np.float32)
spline_bk.py:        depth   = np.zeros(npts, dtype=np.float32)
spline_bk.py:            depth[i]    = np.float32(i) * np.float32(step) + np.float32(zmin_Bs)
spline_bk.py:        obasis  = np.zeros((np.int64(m), np.int64(npts)), dtype = np.float32)
spline_bk.py:        nbasis  = np.zeros((np.int64(m), np.int64(npts)), dtype = np.float32)
spline_bk.py:        t           = np.zeros(m+1, dtype=np.float32)
spline_bk.py:        nbasis  = np.zeros((np.int64(m), np.int64(npts)), dtype = np.float32)
spline_bk.py:        depth   = np.zeros(npts, dtype=np.float32)
spline_bk.py:            depth[i]    = np.float32(i) * np.float32(step) + np.float32(zmin_Bs)
tcps.py:@numba.jit(numba.float32[:](numba.float32, numba.float32, numba.float32))
tcps.py:    return np.array(xlst, dtype=np.float32)
tcps.py:@numba.jit(numba.float32[:](numba.float32, numba.float32[:]))
tcps.py:    outArr  = np.zeros(array.size, dtype=np.float32)
tcps.py:@numba.jit(numba.float32[:](numba.float32, numba.float32[:]))
tcps.py:    outArr  = np.zeros(array.size, dtype=np.float32)
tcps.py:@numba.jit(numba.float32[:](numba.float32[:], numba.float32[:]))
tcps.py:    a3  = np.zeros(a1.size+a2.size, dtype=np.float32)
tcps.py:@numba.jit(numba.float32(numba.float32[:]))
tcps.py:        self.dArr   = np.ones(nl, dtype = np.float32)*np.float32(dh)
tcps.py:        self.dArr   = np.ones(nl, dtype = np.float32)*np.float32(dh)
tcps.py:        self.dArr   = np.array([20.,  15.,  42.,  43.,  45.,  35.], dtype = np.float32)
tcps.py:        # self.dArr   = np.array([20.,  15.,  42.,  43.,  45.,  45., 50., 50.], dtype = np.float32)
tcps.py:        self.dArr   = np.array([35.,  42.,  43.,  45.,  35.], dtype = np.float32)
tcps.py:        # # #     self.nArr   = self.FArr/(self.AArr - np.float32(2.)* self.LArr)
tcps.py:        # # #     self.nArr   = self.Fsph/(self.Asph - np.float32(2.)* self.Lsph)
tcps.py:        self.nArr   = self.FArr/(self.AArr - np.float32(2.)* self.LArr)
tcps.py:    #     self.omega  = _value_divide_array(np.float32(2.*np.pi), self.T)
tcps.py:        dCrAA   = np.zeros(nfval, np.float32)
tcps.py:        dc      = np.zeros(nfval, np.float32)
tcps.py:        dc      = np.zeros(nfval, np.float32)
tcps.py:            self.dcdah  = np.zeros((nfval, nl_in), dtype=np.float32)
tcps.py:            self.dcdav  = np.zeros((nfval, nl_in), dtype=np.float32)
tcps.py:            self.dcdn   = np.zeros((nfval, nl_in), dtype=np.float32)
tcps.py:            self.dcdA   = np.zeros((nfval, nl_in), dtype=np.float32)
tcps.py:            self.dcdC   = np.zeros((nfval, nl_in), dtype=np.float32)
tcps.py:            self.dcdF   = np.zeros((nfval, nl_in), dtype=np.float32)
tcps.py:        dClAA   = np.zeros(nfval, np.float32)
tcps.py:        dc      = np.zeros(nfval, np.float32)
tcps.py:        dc      = np.zeros(nfval, np.float32)
vmodel.py:@numba.jit(numba.float32[:](numba.float32, numba.float32, numba.float32))
vmodel.py:    return np.array(xlst, dtype=np.float32)
vmodel.py:    inArr   = np.loadtxt(infname, dtype=np.float32)
vmodel.py:        eta     = np.ones(vph.size, dtype=np.float32)
vmodel.py:    unit    = np.float32(unit)
vmodel.py:        vsvArr  = np.array([], dtype=np.float32)
vmodel.py:        vshArr  = np.array([], dtype=np.float32)
vmodel.py:        vpvArr  = np.array([], dtype=np.float32)
vmodel.py:        vphArr  = np.array([], dtype=np.float32)
vmodel.py:        etaArr  = np.array([], dtype=np.float32)
vmodel.py:        rhoArr  = np.array([], dtype=np.float32)
vmodel.py:        rArr    = np.array([], dtype=np.float32)
vmodel.py:            r   = np.float32(cline[ ind['radius'] ])*unit
vmodel.py:            vpv = np.float32(cline[ ind['vpv'] ])*unit
vmodel.py:            vsv = np.float32(cline[ ind['vsv'] ])*unit
vmodel.py:            rho = np.float32(cline[ ind['rho'] ])*unit
vmodel.py:                vph = np.float32(cline[ ind['vph'] ])*unit
vmodel.py:                vsh = np.float32(cline[ ind['vsh'] ])*unit
vmodel.py:                eta = np.float32(cline[ ind['eta'] ])*unit
vmodel.py:                eta = np.float32(1.)
vmodel.py:    vsvArr  = vsvArr.astype(np.float32)
vmodel.py:    vshArr  = vshArr.astype(np.float32)
vmodel.py:    vpvArr  = vpvArr.astype(np.float32)
vmodel.py:    vphArr  = vphArr.astype(np.float32)
vmodel.py:    etaArr  = etaArr.astype(np.float32)
vmodel.py:    rhoArr  = rhoArr.astype(np.float32)
vmodel.py:    rArr    = rArr.astype(np.float32)
vmodel.py:    z       = np.zeros(nl+1, dtype=np.float32)
vmodel.py:    rho     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:    vp0     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:    vp2     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:    vp4     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:    vs0     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:    vs2     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:    z       = np.zeros(2*nl+1, dtype=np.float32)
vmodel.py:    rho     = np.zeros(2*nl+1, dtype=np.float32)
vmodel.py:    vp0     = np.zeros(2*nl+1, dtype=np.float32)
vmodel.py:    vp2     = np.zeros(2*nl+1, dtype=np.float32)
vmodel.py:    vp4     = np.zeros(2*nl+1, dtype=np.float32)
vmodel.py:    vs0     = np.zeros(2*nl+1, dtype=np.float32)
vmodel.py:    vs2     = np.zeros(2*nl+1, dtype=np.float32)
vmodel.py:@numba.jit(numba.float32[:, :](numba.float32[:], numba.float32, numba.boolean))
vmodel.py:    g       = np.zeros((3,3), np.float32)
vmodel.py:    #         [ zxC-ys,   yzC+xs,   z*zC+c ]], dtype=np.float32)
vmodel.py:@numba.jit(numba.float32[:,:](numba.float32[:], numba.float32))
vmodel.py:    M       = np.zeros((6,6), np.float32)
vmodel.py:    #     ], dtype=np.float32)
vmodel.py:        ('VsvArr', numba.float32[:]),
vmodel.py:        ('VpvArr', numba.float32[:]),
vmodel.py:        ('VshArr', numba.float32[:]),
vmodel.py:        ('VphArr', numba.float32[:]),
vmodel.py:        ('etaArr', numba.float32[:]),
vmodel.py:        ('rhoArr', numba.float32[:]),
vmodel.py:        ('qsArr',   numba.float32[:]),
vmodel.py:        ('qpArr',   numba.float32[:]),
vmodel.py:        ('rhoArrR', numba.float32[:]),
vmodel.py:        ('rhoArrL', numba.float32[:]),
vmodel.py:        ('rArr', numba.float32[:]),
vmodel.py:        ('zArr', numba.float32[:]),
vmodel.py:        ('rArrS', numba.float32[:]),
vmodel.py:        ('AArr', numba.float32[:]),
vmodel.py:        ('CArr', numba.float32[:]),
vmodel.py:        ('LArr', numba.float32[:]),
vmodel.py:        ('FArr', numba.float32[:]),
vmodel.py:        ('NArr', numba.float32[:]),
vmodel.py:        ('AArrR', numba.float32[:]),
vmodel.py:        ('CArrR', numba.float32[:]),
vmodel.py:        ('LArrR', numba.float32[:]),
vmodel.py:        ('FArrR', numba.float32[:]),
vmodel.py:        ('NArrR', numba.float32[:]),
vmodel.py:        ('AArrL', numba.float32[:]),
vmodel.py:        ('CArrL', numba.float32[:]),
vmodel.py:        ('LArrL', numba.float32[:]),
vmodel.py:        ('FArrL', numba.float32[:]),
vmodel.py:        ('NArrL', numba.float32[:]),
vmodel.py:        ('AArrE', numba.float32[:]),
vmodel.py:        ('CArrE', numba.float32[:]),
vmodel.py:        ('LArrE', numba.float32[:]),
vmodel.py:        ('FArrE', numba.float32[:]),
vmodel.py:        ('NArrE', numba.float32[:]),
vmodel.py:        ('BcArr', numba.float32[:]),
vmodel.py:        ('BsArr', numba.float32[:]),
vmodel.py:        ('GcArr', numba.float32[:]),
vmodel.py:        ('GsArr', numba.float32[:]),
vmodel.py:        ('HcArr', numba.float32[:]),
vmodel.py:        ('HsArr', numba.float32[:]),
vmodel.py:        ('CcArr', numba.float32[:]),
vmodel.py:        ('CsArr', numba.float32[:]),
vmodel.py:        ('dipArr', numba.float32[:]),
vmodel.py:        ('strikeArr', numba.float32[:]),
vmodel.py:        ('dipifArr', numba.float32[:]),
vmodel.py:        ('strikeifArr', numba.float32[:]),
vmodel.py:        ('CijklArr', numba.float32[:, :, :, :, :]),
vmodel.py:        ('CijArr', numba.float32[:, :, :]),
vmodel.py:        ('CijAA', numba.float32[:, :, :]),
vmodel.py:        ('CijETI', numba.float32[:, :, :]),
vmodel.py:        ('rmin', numba.float32),
vmodel.py:        self.zArr   = (np.float32(6371000.) - self.rArr)/np.float32(1000.)
vmodel.py:        self.FArr   = eta * (self.AArr - np.float32(2.)* self.LArr)
vmodel.py:        self.FArr   = self.etaArr * (self.AArr - np.float32(2.)* self.LArr)
vmodel.py:        self.etaArr = self.FArr/(self.AArr - np.float32(2.)* self.LArr)
vmodel.py:        z           = np.float32(6371000.)*np.log(np.float32(6371000.)/self.rArr)
vmodel.py:        self.VsvArr = self.VsvArr*np.float32(6371000.)/self.rArr
vmodel.py:        self.VshArr = self.VshArr*np.float32(6371000.)/self.rArr
vmodel.py:        self.VpvArr = self.VpvArr*np.float32(6371000.)/self.rArr
vmodel.py:        self.VphArr = self.VphArr*np.float32(6371000.)/self.rArr
vmodel.py:        self.rhoArr = self.rhoArr*self.rArr/np.float32(6371000.)
vmodel.py:        self.FArr   = self.etaArr * (self.AArr - np.float32(2.)* self.LArr)
vmodel.py:        self.rArr   = np.float32(6371000.)-z
vmodel.py:        z           = np.float32(6371000.)*np.log(np.float32(6371000.)/self.rArr)
vmodel.py:        tmp         = np.float32(6371000.)/self.rArr
vmodel.py:        self.AArrR  = self.AArr * tmp**(np.float32(-0.2750))
vmodel.py:        self.CArrR  = self.CArr * tmp**(np.float32(-0.2750))
vmodel.py:        self.LArrR  = self.LArr * tmp**(np.float32(-0.2750))
vmodel.py:        self.FArrR  = self.FArr * tmp**(np.float32(-0.2750))
vmodel.py:        self.NArrR  = self.NArr * tmp**(np.float32(-0.2750))
vmodel.py:        self.rhoArrR= self.rhoArr * tmp**(np.float32(-2.2750))
vmodel.py:        self.AArrL  = self.AArr * tmp**(np.float32(-3.))
vmodel.py:        self.CArrL  = self.CArr * tmp**(np.float32(-3.))
vmodel.py:        self.LArrL  = self.LArr * tmp**(np.float32(-3.))
vmodel.py:        self.FArrL  = self.FArr * tmp**(np.float32(-3.))
vmodel.py:        self.NArrL  = self.NArr * tmp**(np.float32(-3.))
vmodel.py:        self.rhoArrL= self.rhoArr * tmp**(np.float32(-5.))
vmodel.py:        self.rArrS  = np.float32(6371000.)-z
vmodel.py:        self.AArr   = np.array(ALst, dtype=np.float32)
vmodel.py:        self.CArr   = np.array(CLst, dtype=np.float32)
vmodel.py:        self.LArr   = np.array(LLst, dtype=np.float32)
vmodel.py:        self.FArr   = np.array(FLst, dtype=np.float32)
vmodel.py:        self.NArr   = np.array(NLst, dtype=np.float32)
vmodel.py:        self.rhoArr = np.array(rhoLst, dtype=np.float32)
vmodel.py:        self.VsvArr = np.array(vsvLst, dtype=np.float32)
vmodel.py:        self.VshArr = np.array(vshLst, dtype=np.float32)
vmodel.py:        self.VpvArr = np.array(vpvLst, dtype=np.float32)
vmodel.py:        self.VphArr = np.array(vphLst, dtype=np.float32)
vmodel.py:        self.etaArr = np.array(etaLst, dtype=np.float32)
vmodel.py:                5.10357020e+03,   1.02872000e+01,   0.00000000e+00,   1.21262000e+01], dtype = np.float32)
vmodel.py:        radius      = (np.float32(6371.)-z)*np.float32(1000.)
vmodel.py:        rho         = data[:, 3]*np.float32(1000.)
vmodel.py:        vpv         = data[:, 1]*np.float32(1000.)
vmodel.py:        vsv         = data[:, 2]*np.float32(1000.)
vmodel.py:        eta         = np.ones(vph.size, dtype=np.float32)
vmodel.py:        rmin        = (np.float32(6371.)-zmax)*np.float32(1000.)
vmodel.py:        rmin        = (np.float32(6371.)-zmax)*np.float32(1000.)
vmodel.py:                val = val *np.float32(1000.)
vmodel.py:        rmax    = (np.float32(6371.)-zmin)*np.float32(1000.)
vmodel.py:        rmin    = (np.float32(6371.)-zmax)*np.float32(1000.)
vmodel.py:        self.rArr   = np.array(rLst, dtype=np.float32)
vmodel.py:        self.zArr   = (np.float32(6371000.) - self.rArr)/np.float32(1000.)
vmodel.py:        self.rhoArr = np.array(rhoLst, dtype=np.float32)
vmodel.py:        self.VsvArr = np.array(vsvLst, dtype=np.float32)
vmodel.py:        self.VshArr = np.array(vshLst, dtype=np.float32)
vmodel.py:        self.VpvArr = np.array(vpvLst, dtype=np.float32)
vmodel.py:        self.VphArr = np.array(vphLst, dtype=np.float32)
vmodel.py:        self.etaArr = np.array(etaLst, dtype=np.float32)
vmodel.py:                val = val *np.float32(1000.)
vmodel.py:                val = val *np.float32(1e9)
vmodel.py:        rmax    = (np.float32(6371.)-zmin)*np.float32(1000.)
vmodel.py:        rmin    = (np.float32(6371.)-zmax)*np.float32(1000.)
vmodel.py:        self.rArr   = np.array(rLst, dtype=np.float32)
vmodel.py:        self.rhoArr = np.array(rhoLst, dtype=np.float32)
vmodel.py:        self.AArr   = np.array(ALst, dtype=np.float32)
vmodel.py:        self.CArr   = np.array(CLst, dtype=np.float32)
vmodel.py:        self.FArr   = np.array(FLst, dtype=np.float32)
vmodel.py:        self.LArr   = np.array(LLst, dtype=np.float32)
vmodel.py:        self.NArr   = np.array(NLst, dtype=np.float32)
vmodel.py:        dArr    = np.zeros(r_inv.size/2, dtype=np.float32)
vmodel.py:        dArr    = (r_inv[ind_even] - r_inv[ind_odd])/np.float32(1000.)
vmodel.py:        dArr    = np.zeros(r_inv.size/2, dtype=np.float32)
vmodel.py:        dArr    = (r_inv[ind_even] - r_inv[ind_odd])/np.float32(1000.)
vmodel.py:            dArr    = np.ones(nl, dtype = np.float32)*np.float32(dh)
vmodel.py:            rho = (rho0+rho1)/np.float32(1e3)/2.
vmodel.py:        rhoArr  = np.array(rhoLst, dtype=np.float32)
vmodel.py:        AArr    = np.array(ALst, dtype=np.float32)
vmodel.py:        CArr    = np.array(CLst, dtype=np.float32)
vmodel.py:        FArr    = np.array(FLst, dtype=np.float32)
vmodel.py:        LArr    = np.array(LLst, dtype=np.float32)
vmodel.py:        NArr    = np.array(NLst, dtype=np.float32)
vmodel.py:            dArr    = np.ones(nl, dtype = np.float32)*np.float32(dh)
vmodel.py:            rho = (rho0+rho1)/np.float32(1e3)/2.
vmodel.py:        rhoArr  = np.array(rhoLst, dtype=np.float32)
vmodel.py:        AArr    = np.array(ALst, dtype=np.float32)
vmodel.py:        CArr    = np.array(CLst, dtype=np.float32)
vmodel.py:        FArr    = np.array(FLst, dtype=np.float32)
vmodel.py:        LArr    = np.array(LLst, dtype=np.float32)
vmodel.py:        NArr    = np.array(NLst, dtype=np.float32)
vmodel.py:        BcArr   = np.array(BcLst, dtype=np.float32)
vmodel.py:        BsArr   = np.array(BsLst, dtype=np.float32)
vmodel.py:        GcArr   = np.array(GcLst, dtype=np.float32)
vmodel.py:        GsArr   = np.array(GsLst, dtype=np.float32)
vmodel.py:        HcArr   = np.array(HcLst, dtype=np.float32)
vmodel.py:        HsArr   = np.array(HsLst, dtype=np.float32)
vmodel.py:        CcArr   = np.array(CcLst, dtype=np.float32)
vmodel.py:        CsArr   = np.array(CsLst, dtype=np.float32)
vmodel.py:        z       = np.zeros(nl+1, dtype=np.float32)
vmodel.py:        rho     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:        vp0     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:        vp2     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:        vp4     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:        vs0     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:        vs2     = np.zeros(nl+1, dtype=np.float32)
vmodel.py:        dipArr      = np.array(dipLst, dtype=np.float32)
vmodel.py:        strikeArr   = np.array(strikeLst, dtype=np.float32)
vmodel.py:        dipArr      = np.array(dipLst, dtype=np.float32)
vmodel.py:        strikeArr   = np.array(strikeLst, dtype=np.float32)
vmodel.py:        self.dipArr     = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.strikeArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:            Cvoigt      = np.zeros((6,6), dtype=np.float32)
vmodel.py:        # self.CijklArr   = np.zeros((3,3,3,3,self.rArr.size), dtype = np.float32)
vmodel.py:        self.CijArr     = np.zeros((6,6,self.rArr.size), dtype = np.float32)
vmodel.py:        self.CijAA      = np.zeros((6,6,self.rArr.size), dtype = np.float32)
vmodel.py:            Cvoigt      = np.zeros((6,6), dtype=np.float32)
vmodel.py:            Mdip        = _bondmat(np.array([1.,0.,0.], dtype=np.float32), self.dipArr[i])
vmodel.py:            Mstrike     = _bondmat(np.array([0.,0.,1.], dtype=np.float32), self.strikeArr[i])
vmodel.py:        self.BcArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.BsArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.GcArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.GsArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.HcArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.HsArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.CcArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.CsArr  = np.zeros(self.rArr.size, np.float32)
vmodel.py:            CijETI          = np.zeros((6,6), np.float32)
vmodel.py:    # # #     r   = np.float32( (6371.- z)*1000.)
vmodel.py:        # r   = np.float32( (6371.- z)*1000.)
vmodel.py:        self.dipifArr   = np.zeros(self.rArr.size, np.float32)
vmodel.py:        self.strikeifArr= np.zeros(self.rArr.size, np.float32)
vmodel.py:        # r   = np.float32( (6371.- z)*1000.)
vmodel.py:        self.zArr       = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VsvArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VshArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VpvArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VphArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.qsArr      = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.qpArr      = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.rhoArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.rArr       = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.etaArr     = np.ones(2*N, dtype=np.float32)
vmodel.py:        self.rArr       = (np.float32(6371000.) - self.zArr*np.float32(1000.))
vmodel.py:        self.zArr       = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VsvArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VshArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VpvArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.VphArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.etaArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.rhoArr     = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.rArr       = np.zeros(2*N, dtype=np.float32)
vmodel.py:        self.etaArr     = np.ones(2*N, dtype=np.float32)
vmodel.py:        self.rArr       = (np.float32(6371000.) - self.zArr*np.float32(1000.))
vprofile.py:        self.hArr       = np.array([], dtype=np.float32)
vprofile.py:        TR                          = np.array(list(set.union(set(self.indata.dispR.pper), set(self.indata.dispR.gper))), dtype=np.float32)
vprofile.py:        TL                          = np.array(list(set.union(set(self.indata.dispL.pper), set(self.indata.dispL.gper))), dtype=np.float32)
vprofile.py:            per                 = np.zeros(200, dtype=np.float32)
vprofile.py:            per                 = np.zeros(200, dtype=np.float32)
vprofile.py:                self.indata.dispR.gvelp    = np.float32(u_out)
vprofile.py:                self.eigkR.get_eigen_psv(np.float32(uz[:nfval,:nl_in]), np.float32(tuz[:nfval,:nl_in]),\
vprofile.py:                                         np.float32(ur[:nfval,:nl_in]), np.float32(tur[:nfval,:nl_in]))
vprofile.py:                self.eigkR.get_vkernel_psv(np.float32(dcdah[:nfval,:nl_in]), np.float32(dcdav[:nfval,:nl_in]), np.float32(dcdbh[:nfval,:nl_in]),\
vprofile.py:                        np.float32(dcdbv[:nfval,:nl_in]), np.float32(dcdn[:nfval,:nl_in]), np.float32(dcdr[:nfval,:nl_in]))
vprofile.py:                self.indata.dispL.gvelp    = np.float32(u_out)
vprofile.py:                self.eigkL.get_eigen_sh(np.float32(ut[:nfval,:nl_in]), np.float32(tut[:nfval,:nl_in]) )
vprofile.py:                self.eigkL.get_vkernel_sh(np.float32(dcdbh[:nfval,:nl_in]), np.float32(dcdbv[:nfval,:nl_in]),np.float32(dcdr[:nfval,:nl_in]))
vprofile.py:            hin         = np.zeros(100, dtype=np.float32)
vprofile.py:            vsin        = np.zeros(100, dtype=np.float32)
vprofile.py:            vpvs        = np.zeros(100, dtype=np.float32)
vprofile.py:            qsin        = 600.*np.ones(100, dtype=np.float32)
vprofile.py:            qpin        = 1400.*np.ones(100, dtype=np.float32)
vprofile.py:            self.indata.rfr.tp  = np.arange(self.npts, dtype=np.float32)*1./self.fs
vprofile.py:        self.model.isomod.para.paraval  = np.float32(self.paraval[ind, :])
vprofile.py:        self.model.isomod.para.paraval  = np.mean(self.paraval[ind, :], axis = 0, dtype=np.float32)
vprofile.py:        self.model.isomod.para.paraval  = np.mean(self.paraval[ind, :], axis = 0, dtype=np.float32)
